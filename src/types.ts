import type { TablesInsert, Tables } from "./db/database.types";

//
// Auth
//

/**
 * Represents an authenticated user.
 */
export interface AuthUserDTO {
  id: string;
  email: string;
}

/**
 * Command to register a new user.
 */
export interface RegisterUserCommand {
  email: string;
  password: string;
}

/**
 * Response returned after authentication (register/login).
 */
export interface AuthResponseDTO {
  user: AuthUserDTO;
  accessToken: string;
}

// Login uses the same types as register
export type LoginCommand = RegisterUserCommand;
export type LoginResponseDTO = AuthResponseDTO;

//
// Preferences
//

/**
 * DTO for a dietary preference.
 */
export type PreferenceDTO = Tables<"preferences">;

/**
 * Response wrapping a list of preferences.
 */
export interface PreferencesResponseDTO {
  data: PreferenceDTO[];
}

/**
 * DTO for mapping a user to a preference.
 */
export type UserPreferenceDTO = Tables<"user_preferences">;

/**
 * Response wrapping a list of user preferences.
 */
export interface UserPreferencesResponseDTO {
  data: UserPreferenceDTO[];
}

/**
 * Command to update the current user's preferences.
 */
export interface UpdateUserPreferencesCommand {
  preferences: string[];
}

/**
 * Response returned after updating user preferences.
 */
export interface UpdateUserPreferencesResponseDTO {
  data: UserPreferenceDTO[];
}

//
// Extended Preferences Types
//

/**
 * Extended DTO for user preference that includes preference name.
 */
export type ExtendedUserPreferenceDTO = UserPreferenceDTO & {
  name: string;
};

/**
 * Response wrapping a list of extended user preferences.
 */
export interface ExtendedUserPreferencesResponseDTO {
  data: ExtendedUserPreferenceDTO[];
}

//
// Recipes
//

/**
 * DTO representing a recipe.
 */
export type RecipeDTO = Tables<"recipes">;

/**
 * Metadata for paginated recipe lists.
 */
export interface ListRecipesMeta {
  page: number;
  limit: number;
  total: number;
}

/**
 * Response wrapping a paginated list of recipes.
 */
export interface ListRecipesResponseDTO {
  meta: ListRecipesMeta;
  data: RecipeDTO[];
}

/**
 * Response for retrieving a single recipe.
 */
export type GetRecipeResponseDTO = RecipeDTO;

/**
 * Command to create a new recipe. `user_id` is inferred from auth context.
 */
export type CreateRecipeCommand = Pick<
  TablesInsert<"recipes">,
  "name" | "ingredients" | "instructions" | "is_ai_generated"
>;

/**
 * Response returned after creating a recipe.
 */
export type CreateRecipeResponseDTO = RecipeDTO;

//
// AI Generation
//

/**
 * Command to request recipe generation via AI.
 */
export interface GenerateRecipeCommand {
  prompt: string;
  preferences: string[];
}

/**
 * DTO for a recipe generated by AI.
 */
export interface AIRecipeDTO {
  name: string;
  ingredients: string;
  instructions: string;
}

/**
 * Response returned after AI generates a recipe.
 */
export interface GenerateRecipeResponseDTO {
  recipe: AIRecipeDTO;
  disclaimer: string;
}

/**
 * Command to delete a recipe.
 */
export interface DeleteRecipeCommand {
  id: string;
}

/**
 * View model for recipe list item display.
 */
export interface RecipeViewModel {
  id: string;
  name: string;
  createdAtFormatted: string;
}
