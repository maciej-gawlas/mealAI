-- Migration: Initial Schema Setup for HealthyMeal MVP
-- Description: Creates the core tables and security policies for the HealthyMeal MVP
-- Tables: preferences, user_preferences, recipes
-- Author: Database Migration System
-- Date: 2025-07-23
-- Enable PostgreSQL Extensions
create extension if not exists "uuid-ossp";

-- Create tables
---------------
-- preferences table: stores dietary and other food preferences
create table preferences (
  id uuid primary key default gen_random_uuid(),
  name text not null unique
);

comment on table preferences is 'Stores dietary and food preferences that users can select';

comment on column preferences.id is 'Unique identifier for the preference';

comment on column preferences.name is 'Human-readable name of the preference';

-- Enable RLS on preferences
alter table
  preferences enable row level security;

-- RLS Policies for preferences table
-- Anonymous users can view preferences
create policy "preferences_anon_select" on preferences for
select
  to anon using (true);

-- Authenticated users can view preferences
create policy "preferences_auth_select" on preferences for
select
  to authenticated using (true);

-- Insert initial dietary preferences
insert into
  preferences (name)
values
  ('Vegetarian'),
  ('Gluten-Free'),
  ('Dairy-Free'),
  ('Low-Carb'),
  ('Nut-Free');

-- user_preferences table: junction table linking users to their preferences
create table user_preferences (
  user_id uuid not null references auth.users(id) on delete cascade,
  preference_id uuid not null references preferences(id) on delete cascade,
  primary key (user_id, preference_id)
);

comment on table user_preferences is 'Junction table linking users to their dietary preferences';

comment on column user_preferences.user_id is 'Reference to the user in auth.users table';

comment on column user_preferences.preference_id is 'Reference to the preference selected by the user';

-- Enable RLS on user_preferences
alter table
  user_preferences enable row level security;

-- RLS Policies for user_preferences table
-- Authenticated users can view only their own preferences
create policy "user_preferences_auth_select" on user_preferences for
select
  to authenticated using (auth.uid() = user_id);

-- Authenticated users can insert their own preferences
create policy "user_preferences_auth_insert" on user_preferences for
insert
  to authenticated with check (auth.uid() = user_id);

-- Authenticated users can delete their own preferences
create policy "user_preferences_auth_delete" on user_preferences for delete to authenticated using (auth.uid() = user_id);

-- recipes table: stores user recipes
create table recipes (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references auth.users(id) on delete cascade,
  name text not null,
  ingredients text not null,
  instructions text not null,
  is_ai_generated boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

comment on table recipes is 'Stores user recipes with ingredients and instructions';

comment on column recipes.id is 'Unique identifier for the recipe';

comment on column recipes.user_id is 'Reference to the user who created the recipe';

comment on column recipes.name is 'Name of the recipe';

comment on column recipes.ingredients is 'List of ingredients needed for the recipe';

comment on column recipes.instructions is 'Step-by-step cooking instructions';

comment on column recipes.is_ai_generated is 'Flag indicating if the recipe was generated by AI';

comment on column recipes.created_at is 'Timestamp when the recipe was created';

comment on column recipes.updated_at is 'Timestamp when the recipe was last updated';

-- Enable RLS on recipes
alter table
  recipes enable row level security;

-- RLS Policies for recipes table
-- Authenticated users can view only their own recipes
create policy "recipes_auth_select" on recipes for
select
  to authenticated using (auth.uid() = user_id);

-- Authenticated users can insert their own recipes
create policy "recipes_auth_insert" on recipes for
insert
  to authenticated with check (auth.uid() = user_id);

-- Authenticated users can update their own recipes
create policy "recipes_auth_update" on recipes for
update
  to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- Authenticated users can delete their own recipes
create policy "recipes_auth_delete" on recipes for delete to authenticated using (auth.uid() = user_id);

-- Create updated_at trigger function
create or replace function set_updated_at() returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Create indexes
----------------
create index recipes_user_id_idx on recipes(user_id);

create index recipes_created_at_idx on recipes(created_at);

-- Create trigger for recipes table
create trigger trg_recipes_set_updated_at before
update
  on recipes for each row execute function set_updated_at();

-- Add helpful messages
comment on function set_updated_at() is 'Trigger function to automatically set updated_at timestamp';

comment on trigger trg_recipes_set_updated_at on recipes is 'Automatically updates the updated_at timestamp when a recipe is modified';